# Homeassistant-Mitsubishi configuration
[project]
name = "homeassistant-mitsubishi"
description = "Home Assistant integration for Mitsubishi air conditioners"
requires-python = ">=3.12"

[tool.ruff]
target-version = "py312"
line-length = 120
exclude = [
    ".git",
    ".mypy_cache",
    ".pytest_cache",
    ".ruff_cache",
    ".venv",
    "venv",
    "__pycache__",
    "dist",
    "build",
]

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "UP", # pyupgrade
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "SIM", # flake8-simplify
    "N",  # pep8-naming
    "ARG", # flake8-unused-arguments
    "DTZ", # flake8-datetimez
    "PGH", # pygrep-hooks
    "RSE", # flake8-raise
    "RET", # flake8-return
    "YTT", # flake8-2020
    "BLE", # flake8-blind-except
    "A",  # flake8-builtins
    "T20", # flake8-print
    "PT", # flake8-pytest-style
]
ignore = [
    "E501",  # Line too long (handled by formatter)
    "S101",  # Use of assert (needed for tests)
    "S105",  # Possible hardcoded password
    "S106",  # Possible hardcoded password
    "ARG002", # Unused method argument
    "BLE001", # Catching blind exception
]

[tool.ruff.lint.per-file-ignores]
"tests/*" = ["S101", "ARG", "S105", "S106"]
"custom_components/mitsubishi/__init__.py" = ["E402"]

[tool.ruff.lint.isort]
force-single-line = false
combine-as-imports = true
known-first-party = ["custom_components.mitsubishi"]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "lf"

[tool.pytest.ini_options]
asyncio_mode = "auto"
addopts = "-v --strict-markers --cov=custom_components.mitsubishi --cov-report=term-missing --cov-report=xml --cov-report=html"
filterwarnings = [
    "ignore::DeprecationWarning",
    "ignore::pytest.PytestUnraisableExceptionWarning"
]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "asyncio: marks tests as async",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "slow: marks tests as slow running",
]

[tool.coverage.run]
source = ["custom_components/mitsubishi"]
omit = [
    "*/tests/*",
    "*/test_*.py",
    "*/__pycache__/*",
    "*/.venv/*",
    "*/venv/*",
]

[tool.coverage.report]
fail_under = 85  # Reduced from 100 for practicality
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
    "@overload",
    "except ImportError:",
]
precision = 2
show_missing = true

[tool.mypy]
python_version = "3.12"  # Match minimum supported version
show_error_codes = true
follow_imports = "normal"
local_partial_types = true
strict_equality = true
no_implicit_optional = true
warn_incomplete_stub = true
warn_redundant_casts = true
warn_unused_configs = true
warn_unused_ignores = false  # Too noisy with HA
check_untyped_defs = true
disallow_incomplete_defs = false  # Too strict for HA
disallow_subclassing_any = false  # HA uses this pattern
disallow_untyped_calls = false  # Too strict for HA
disallow_untyped_decorators = false  # HA decorators often untyped
disallow_untyped_defs = false  # Too strict initially
warn_return_any = true
warn_unreachable = true
disable_error_code = ["import-not-found", "import-untyped"]
namespace_packages = true
explicit_package_bases = true

[[tool.mypy.overrides]]
module = "homeassistant.*"
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "pymitsubishi.*"
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "custom_components.*"
no_implicit_reexport = true
